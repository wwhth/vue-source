{
  "version": 3,
  "sources": [
    "../../shared/src/index.ts",
    "../src/effect.ts",
    "../src/reactiveEffect.ts",
    "../src/baseHandler.ts",
    "../src/reactive.ts",
    "../src/ref.ts",
    "../src/computed.ts"
  ],
  "sourcesContent": [
    "export function isObject(val: unknown): boolean {\n  return val !== null && typeof val === \"object\";\n}\n\nexport function isFunction(val: unknown): boolean {\n  return typeof val === \"function\";\n}\n\nexport function isString(val: unknown): boolean {\n  return typeof val === \"string\";\n}\n\nexport function isNumber(val: unknown): boolean {\n  return typeof val === \"number\";\n}\n\nexport function isSymbol(val: unknown): boolean {\n  return typeof val === \"symbol\";\n}\n",
    "import { DirtyLevels } from \"./constants\";\n\nexport function effect(fn, options?) {\n  // 1. 创建effect的时候，会先执行一次fn，此时会访问到响应式数据，触发get\n  // 2. 当响应式数据变化的时候，会触发set，此时会执行effect的run方法\n  const _effect = new ReactiveEffect(fn, () => {\n    _effect.run();\n  });\n  _effect.run();\n\n  if (options) {\n    Object.assign(_effect, options);\n  }\n\n  const runner = _effect.run.bind(_effect);\n  runner.effect = _effect;\n  return runner;\n}\nexport let activeEffect;\n\nfunction preCleanEffect(effect) {\n  effect._depLength = 0;\n  effect._trackId++; //每次执行，trackId+1 ，如果当前同一个effect执行，id就是相同的\n}\n\nfunction postCleanEffect(effect) {\n  if (effect.deps.length > effect._depLength) {\n    for (let i = effect._depLength; i < effect.deps.length; i++) {\n      cleanDepEffect(effect.deps[i], effect); //删除映射表对应的effect\n    }\n    effect.deps.length = effect._depLength; //更新依赖列表的长度\n  }\n}\nexport class ReactiveEffect {\n  _trackId = 0; //记录当前的effect执行了几次\n  deps = [];\n  _depLength = 0;\n  _running = 0;\n  _dirtyLevel = DirtyLevels.Dirty;\n  // 默认是响应式的\n  public active = true;\n  // fn用户编写的函数，scheduler(数据发生变化调用run)调度函数\n  constructor(public fn, public scheduler) {}\n  public get dirty() {\n    return this._dirtyLevel === DirtyLevels.Dirty;\n  }\n  public set dirty(value) {\n    this._dirtyLevel = value ? DirtyLevels.Dirty : DirtyLevels.NoDirty;\n  }\n  run() {\n    // 每次运行effect后变为Nodirty\n    this._dirtyLevel = DirtyLevels.NoDirty;\n    if (!this.active) {\n      // 不是激活的，执行后什么都不做\n      return this.fn();\n    }\n    let lastEffect = activeEffect;\n    try {\n      activeEffect = this;\n      preCleanEffect(this);\n      this._running++; //运行一次+1\n      return this.fn(); //依赖收集\n    } finally {\n      this._running--; //结束之后-1\n      postCleanEffect(this);\n      activeEffect = lastEffect;\n    }\n  }\n  stop() {\n    this.active = false;\n  }\n}\nfunction cleanDepEffect(dep, effect) {\n  dep.delete(effect);\n  if (dep.size === 0) {\n    dep.__cleanup__();\n  }\n}\n\n// 双向记忆\n// trackId 用于记录effect执行了几次（防止一个属性在一个effect中多次收集依赖），多次访问只收集一次\n// depLength 用于记录effect关联了几个dep\nexport function trackEffect(effect, dep) {\n  // 需要重新设计收集依赖，每次执行的时候，都需要清空\n  if (dep.get(effect) !== effect._trackId) {\n    dep.set(effect, effect._trackId);\n    let oldDep = effect.deps[effect._depLength];\n    if (oldDep !== dep) {\n      if (oldDep) {\n        cleanDepEffect(oldDep, effect);\n      }\n      effect.deps[effect._depLength++] = dep; //按照本次最新的来存放\n    } else {\n      effect._depLength++;\n    }\n  }\n  // dep.set(effect, effect._trackId);\n  // // 我还想effect和dep关联起来\n  // effect.deps[effect._depLength++] = dep;\n  console.log(\"🚀 ~ trackEffect ~ effect.deps:\", effect, dep);\n}\n\nexport function triggerEffects(dep) {\n  for (const effect of dep.keys()) {\n    if (effect._dirtyLevel === DirtyLevels.NoDirty) {\n      effect._dirtyLevel = DirtyLevels.Dirty;\n    }\n    if (effect._running === 0) {\n      // 防止重复执行 =>如果不是正在执行的，才能够继续执行\n      if (effect.scheduler) {\n        effect.scheduler();\n      }\n    }\n  }\n}\n",
    "import { activeEffect, trackEffect, triggerEffects } from \"./effect\";\n\nconst targetMap = new WeakMap();\n\nexport const createDep = (cleanup, key) => {\n  const dep = new Map() as any; //创建的收集器还是一个map\n  dep.__cleanup__ = cleanup; //增加删除的方法\n  dep.name = key;\n  return dep;\n};\n\nexport function track(target, key) {\n  // TODO\n  // activeEffect  如果有这个值，说明是在effect中调用的，需要收集依赖\n  if (activeEffect) {\n    let depsMap = targetMap.get(target);\n    if (!depsMap) {\n      //新增的\n      depsMap = new Map();\n      targetMap.set(target, depsMap);\n    }\n\n    let dep = depsMap.get(key);\n    if (!dep) {\n      dep = createDep(() => depsMap.delete(key), key); //后期清理一些不需要的属性\n      depsMap.set(key, dep);\n    }\n\n    trackEffect(activeEffect, dep); //将当前的effect放入到dep（映射表）中，后续可以根据值的变化触发此dep中存放的effect\n    console.log(\"🚀 ~ track ~ targetMap:\", targetMap);\n  }\n}\n\nexport function trigger(target, key, newValue, oldValue) {\n  let depsMap = targetMap.get(target);\n  if (!depsMap) return;\n  let dep = depsMap.get(key);\n  if (dep) {\n    //这个修改的属性对应的effect\n    triggerEffects(dep);\n  }\n}\n\n// 结构\n// targetMap = {\n//   target: {\n//     key: effect:Map,effect:Map,...\n//   }:Map\n// }:Map\n",
    "import { isObject } from \"@vue/shared\";\nimport { track, trigger } from \"./reactiveEffect\";\nimport { reactive } from \"./reactive\";\nimport { ReactiveFlags } from \"./constants\";\n\nexport const mutableHandlers: ProxyHandler<any> = {\n  get(target, key, receiver) {\n    // 1. 判断是否是响应式对象\n\n    if (key === ReactiveFlags.IS_REACTIVE) {\n      return true;\n    }\n    // 依赖收集\n    track(target, key); //收集这个对象的属性，和effect关联起来\n    let res = Reflect.get(target, key, receiver);\n    // 如果是对象，需要递归处理\n    if (isObject(res)) {\n      return reactive(res);\n    }\n    return res;\n  },\n  set(target, key, value, receiver) {\n    // 触发更新\n    let oldValue = target[key];\n    let result = Reflect.set(target, key, value, receiver);\n    if (oldValue !== value) {\n      // 需要触发页面更新\n      trigger(target, key, value, oldValue);\n    }\n    return result;\n  },\n};\n",
    "import { isObject } from \"@vue/shared\";\nimport { mutableHandlers } from \"./baseHandler\";\nimport { ReactiveFlags } from \"./constants\";\n\nconst reactiveMap = new WeakMap();\n\nfunction createReactiveObject(target: object) {\n  if (target[ReactiveFlags.IS_REACTIVE]) {\n    return target;\n  }\n  const hasReactive = reactiveMap.get(target);\n  if (hasReactive) {\n    return hasReactive;\n  }\n  let proxy = new Proxy(target, mutableHandlers);\n  reactiveMap.set(target, proxy);\n  return proxy;\n}\n\nexport function reactive(target: any) {\n  // 1. 判断是否是对象\n  if (isObject(target)) {\n    // 2.创建响应式对象\n    return createReactiveObject(target);\n  }\n  return target;\n}\n\nexport function toReactive(target: any) {\n  return isObject(target) ? reactive(target) : target;\n}\n",
    "import { isObject } from \"@vue/shared\";\nimport { activeEffect, trackEffect, triggerEffects } from \"./effect\";\nimport { toReactive } from \"./reactive\";\nimport { createDep } from \"./reactiveEffect\";\n\nexport function ref(value: any) {\n  return createRef(value);\n}\nfunction createRef(value: any) {\n  return new RefImpl(value);\n}\n\nclass RefImpl {\n  public __v_isRef = true; // 标识当前对象是ref对象\n  public _value: any; // 保存原始值\n  public dep: any = new Set(); // 收集对应的effect\n  constructor(public rawValue: any) {\n    this._value = toReactive(rawValue); // 将原始值转换为响应式对象\n  }\n  get value() {\n    trackRefValue(this);\n    return this._value;\n  }\n  set value(newValue) {\n    if (newValue !== this.rawValue) {\n      this._value = newValue; // 保存新值\n      this.rawValue = newValue; // 保存原始值\n      triggerRefValue(this);\n    }\n  }\n}\nexport function trackRefValue(ref) {\n  if (activeEffect) {\n    trackEffect(\n      activeEffect,\n      (ref.dep = createDep(() => (ref.dep = undefined), \"undefined\"))\n    ); // 收集依赖\n  }\n}\nexport function triggerRefValue(ref) {\n  let dep = ref.dep;\n  if (dep) {\n    triggerEffects(dep); // 触发依赖更新\n  }\n}\nclass ObjectRefImpl {\n  public __v_isRef = true; // 标识当前对象是ref对象\n  constructor(public _object: any, public key: string) {}\n  get value() {\n    return this._object[this.key];\n  }\n  set value(newValue) {\n    this._object[this.key] = newValue;\n  }\n}\n\nexport function toRef(object, key) {\n  if (isObject(object)) {\n    return new ObjectRefImpl(object, key);\n  } else {\n    // return object[key];\n    return new Error(\"object must be a object\");\n  }\n}\n\nexport function toRefs(object: any) {\n  if (isObject(object)) {\n    const ret = {};\n    for (const key in object) {\n      ret[key] = toRef(object, key);\n    }\n    return ret;\n  } else {\n    return new Error(\"object must be a object\");\n  }\n}\n\nexport function proxyRefs(object: any) {\n  return new Proxy(object, {\n    get(target, key, revevier) {\n      let r = Reflect.get(target, key, revevier);\n      console.log(\"r: \", r);\n\n      return r.__v_isRef ? r.value : r;\n    },\n    set(target, key, value, revevier) {\n      let r = Reflect.get(target, key, revevier);\n      if (r.__v_isRef) {\n        r.value = value;\n      } else {\n        return Reflect.set(target, key, value, revevier);\n      }\n    },\n  });\n}\n",
    "import { isFunction } from \"@vue/shared\";\nimport { ReactiveEffect } from \"./effect\";\nimport { trackRefValue, triggerRefValue } from \"./ref\";\n\nexport function computed(getterOrOptions) {\n  let onlyGetter = isFunction(getterOrOptions);\n  let getter = onlyGetter ? getterOrOptions : getterOrOptions.get;\n  let setter = onlyGetter ? () => {} : getterOrOptions.set;\n  console.log(getter, setter);\n  return new ComputedRefImpl(getter, setter); // 返回一个计算属性ref\n}\nclass ComputedRefImpl {\n  public _value;\n  public effect;\n  public dep = new Set();\n  constructor(getter, public setter) {\n    // 我们需要创建一个effect来管理当前计算属性的dirty状态\n    this.effect = new ReactiveEffect(\n      () => getter(this._value),\n      () => {\n        // 计算属性以来的值变化了，我们应该触发渲染重新执行\n        triggerRefValue(this);\n      }\n    );\n  }\n  get value() {\n    if (this.effect.dirty) {\n      //默认取值一定是dirty，所以第一次取值的时候会执行effect.run()，然后dirty变为false\n      this._value = this.effect.run();\n      trackRefValue(this);\n      // 如果在当前effect中访问了计算属性，计算属性会收集这个effect，那么计算属性会重新执行，并且dirty变为false\n    }\n    return this._value;\n  }\n  set value(newValue) {\n    this.setter(newValue);\n  }\n}\n"
  ],
  "mappings": "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",
  "names": [
    "effect",
    "ref"
  ]
}
